diff --git a/src/ApiBundle/Model/Product.php b/src/ApiBundle/Model/Product.php
new file mode 100644
index 0000000..8285ef2
--- /dev/null
+++ b/src/ApiBundle/Model/Product.php
@@ -0,0 +1,71 @@
+<?php
+
+namespace ApiBundle\Model;
+
+use Symfony\Component\Validator\Constraints as Assert;
+
+class Product
+{
+    private $id;
+
+    /**
+     * @Assert\NotBlank()
+     */
+    private $name;
+
+    private $description;
+
+    private $price;
+
+    private $createdAt;
+
+    public function getId()
+    {
+        return $this->id;
+    }
+
+    public function setId($id)
+    {
+        $this->id = $id;
+    }
+
+    public function getName()
+    {
+        return $this->name;
+    }
+
+    public function setName($name)
+    {
+        $this->name = $name;
+    }
+
+    public function getDescription()
+    {
+        return $this->description;
+    }
+
+    public function setDescription($description)
+    {
+        $this->description = $description;
+    }
+
+    public function getPrice()
+    {
+        return $this->price;
+    }
+
+    public function setPrice($price)
+    {
+        $this->price = $price;
+    }
+
+    public function getCreatedAt()
+    {
+        return $this->createdAt;
+    }
+
+    public function setCreatedAt($createdAt)
+    {
+        $this->createdAt = $createdAt;
+    }
+}
diff --git a/src/ApiBundle/Repository/ProductRepository.php b/src/ApiBundle/Repository/ProductRepository.php
new file mode 100644
index 0000000..9cb89c9
--- /dev/null
+++ b/src/ApiBundle/Repository/ProductRepository.php
@@ -0,0 +1,97 @@
+<?php
+
+namespace ApiBundle\Repository;
+
+use AppBundle\Model\Product;
+use GuzzleHttp\Client;
+use Psr\Log\LoggerInterface;
+use Symfony\Component\Serializer\SerializerInterface;
+
+class ProductRepository
+{
+    private $client;
+
+    private $logger;
+
+    private $serializer;
+
+    public function __construct(Client $client, LoggerInterface $logger, SerializerInterface $serializer)
+    {
+        $this->client = $client;
+        $this->logger = $logger;
+        $this->serializer = $serializer;
+    }
+
+    /**
+     * @return Product[]
+     */
+    public function findAll()
+    {
+        $data = $this->getJson('/products.json');
+
+        $products = [];
+        foreach ($data as $row) {
+            $product = new Product();
+            $product->setId($row['id']);
+            $product->setName($row['name']);
+            $product->setDescription($row['description']);
+            $product->setPrice($row['price']);
+            $product->setCreatedAt(\DateTime::createFromFormat('Y-m-d H:i:s', $row['created_at']));
+
+            $products[] = $product;
+        }
+        $this->logger->info(sprintf('Returning %s products', count($products)));
+
+        return $products;
+    }
+
+    public function insert(Product $product)
+    {
+        $this->client->post('/products.json', [
+            'body' => $this->serializer->serialize($product, 'json')
+        ]);
+    }
+
+    /**
+     * @param $id
+     * @return Product
+     * @throws \Exception
+     */
+    public function find($id)
+    {
+        $data = $this->getJson(sprintf('/products/%s.json', $id));
+
+        return $this->hydrateProduct($data);
+    }
+
+    /**
+     * @param string $uri
+     * @return array
+     * @throws \Exception
+     */
+    protected function getJson($uri)
+    {
+        $response = $this->client->get($uri);
+
+        $data = json_decode($response->getBody(), true);
+        if (false === $data) {
+            // error handling
+            // PSR-7
+            throw new \Exception('Bad response! '.$response->getBody());
+        }
+
+        return $data;
+    }
+
+    private function hydrateProduct(array $data)
+    {
+        $product = new Product();
+        $product->setId($data['id']);
+        $product->setName($data['name']);
+        $product->setDescription($data['description']);
+        $product->setPrice($data['price']);
+        $product->setCreatedAt(\DateTime::createFromFormat('Y-m-d H:i:s', $data['created_at']));
+
+        return $product;
+    }
+}
\ No newline at end of file
diff --git a/src/ApiBundle/Resources/config/services.yml b/src/ApiBundle/Resources/config/services.yml
new file mode 100644
index 0000000..964aef6
--- /dev/null
+++ b/src/ApiBundle/Resources/config/services.yml
@@ -0,0 +1,13 @@
+services:
+    api.client.api_client:
+        class: GuzzleHttp\Client
+        arguments:
+            -
+                base_uri: http://ec2-54-219-7-89.us-west-1.compute.amazonaws.com
+
+    api.repository.product_repository:
+        class: AppBundle\Repository\ProductRepository
+        arguments:
+            - '@api.client.api_client'
+            - '@logger'
+            - '@serializer'
